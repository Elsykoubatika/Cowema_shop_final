import { useMemo } from 'react';
import { Product } from '../types/product';

interface AdvancedDistributedProducts {
  yaBaBossProducts: Product[];
  generalProducts: Product[];
  totalDisplayed: number;
}

// Fonction pour normaliser les cha√Ænes de caract√®res avec gestion des accents et caract√®res sp√©ciaux
const normalizeString = (str: string): string => {
  return str
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9\s]/g, ' ') // Remplacer les caract√®res sp√©ciaux par des espaces
    .replace(/\s+/g, ' ') // Remplacer les espaces multiples par un seul
    .trim();
};

// Mapping s√©par√© et corrig√© pour Beaut√© ET Sant√© & Bien-√™tre
const categoryMapping: { [key: string]: string[] } = {
  'electronics': ['√©lectronique', 'electronique', 'electronic', 'tech', 'technologie', 'informatique'],
  '√©lectronique': ['electronics', 'electronic', 'tech', 'informatique'],
  'electronique': ['electronics', 'electronic', 'tech', 'informatique'],
  
  // CAT√âGORIE BEAUT√â - S√âPAR√âE
  'beaute': ['beaut√©', 'beauty', 'cosmetic', 'cosmetique', 'cosm√©tique', 'maquillage', 'makeup', 'rouge', 'lipstick', 'mascara', 'foundation', 'fond de teint', 'vernis', 'nail'],
  'beaut√©': ['beaute', 'beauty', 'cosmetic', 'maquillage', 'makeup', 'rouge', 'lipstick'],
  'beauty': ['beaute', 'beaut√©', 'cosmetic', 'maquillage'],
  'cosmetic': ['beaute', 'beaut√©', 'cosm√©tique', 'maquillage'],
  'cosmetique': ['beaute', 'beaut√©', 'cosmetic', 'maquillage'],
  'cosm√©tique': ['beaute', 'beaut√©', 'cosmetic', 'maquillage'],
  'maquillage': ['beaute', 'beaut√©', 'makeup', 'cosmetic'],
  
  // CAT√âGORIE SANT√â & BIEN-√äTRE - S√âPAR√âE
  'sante': ['sant√©', 'health', 'medical', 'm√©dical', 'vitamines', 'supplements', 'nutrition'],
  'sant√©': ['sante', 'health', 'medical', 'vitamines', 'supplements'],
  'bien etre': ['bien-√™tre', 'wellness', 'fitness', 'sport', 'relaxation', 'massage', 'yoga'],
  'bien √™tre': ['bien-√™tre', 'wellness', 'fitness', 'sport', 'relaxation'],
  'bien-√™tre': ['bien etre', 'wellness', 'fitness', 'sport', 'relaxation'],
  'wellness': ['bien-√™tre', 'bien etre', 'fitness', 'sport'],
  'health': ['sante', 'sant√©', 'medical', 'vitamines'],
  'fitness': ['bien-√™tre', 'sport', 'exercise', 'musculation'],
  'sport': ['fitness', 'bien-√™tre', 'exercise'],
  
  'cuisine': ['kitchen', 'culinaire', 'cookware', 'electromenager', '√©lectrom√©nager'],
  'kitchen': ['cuisine', 'culinaire', 'electromenager'],
  'electromenager': ['√©lectrom√©nager', 'appliance', 'menager', 'cuisine', 'kitchen'],
  '√©lectrom√©nager': ['electromenager', 'appliance', 'cuisine'],
  'habillements': ['v√™tements', 'vetements', 'clothing', 'fashion', 'mode', 'textile'],
  'v√™tements': ['habillements', 'clothing', 'fashion', 'vetements'],
  'vetements': ['habillements', 'clothing', 'fashion', 'v√™tements'],
  'clothing': ['habillements', 'v√™tements', 'vetements', 'fashion'],
  'jouets': ['toys', 'toy', 'jeu', 'jeux', 'enfant', 'bebe', 'b√©b√©'],
  'toys': ['jouets', 'toy', 'jeu', 'jeux'],
  'solaire': ['solar', 'photovoltaique', 'photovolta√Øque', 'energie', '√©nergie', 'panneau'],
  'solar': ['solaire', 'photovoltaique', 'energie']
};

// Algorithme de scoring YaBaBoss ultra-avanc√©
const calculateAdvancedYaBaBossScore = (product: Product): number => {
  let score = 0;
  
  if (!product.isYaBaBoss) return 0;
  score += 100; // Base YaBaBoss
  
  // Promotion (plus attractif) - Scoring am√©lior√©
  if (product.promoPrice && product.promoPrice < product.price) {
    const discountPercent = ((product.price - product.promoPrice) / product.price) * 100;
    score += discountPercent * 3; // Bonus important pour les promos
    if (discountPercent > 30) score += 20; // Bonus extra pour grosses promos
  }
  
  // Stock (popularit√©) - Scoring plus nuanc√©
  if (product.stock > 100) score += 60;
  else if (product.stock > 50) score += 45;
  else if (product.stock > 20) score += 25;
  else if (product.stock > 10) score += 15;
  else if (product.stock > 0) score += 5;
  
  // Qualit√© du contenu - Scoring am√©lior√©
  if (product.images && product.images.length > 5) score += 50;
  else if (product.images && product.images.length > 3) score += 35;
  else if (product.images && product.images.length > 1) score += 20;
  
  if (product.videoUrl) score += 40; // Bonus important pour les vid√©os
  
  // Gamme de prix optimale - Scoring plus pr√©cis
  if (product.price >= 20000 && product.price <= 150000) score += 30; // Sweet spot
  else if (product.price >= 10000 && product.price <= 200000) score += 20;
  else if (product.price >= 5000 && product.price <= 300000) score += 10;
  
  // Mots-cl√©s tendance ultra-√©tendus
  const productText = `${product.name} ${product.description || ''}`.toLowerCase();
  const trendingKeywords = [
    'air fryer', 'friteuse', 'smartphone', 'bluetooth', 'sans fil', 'portable',
    'robot', 'machine', 'automatique', 'intelligent', 'led', 'solaire',
    'rechargeable', 'multifonction', 'professionnel', 'premium', 'wifi',
    'smart', 'digital', '√©cran', 'tactile', 'wireless', 'usb', 'gaming',
    'fitness', 'sport', 'beaut√©', 'cuisine', 'maison', 'jardin'
  ];
  
  let keywordMatches = 0;
  trendingKeywords.forEach(keyword => {
    if (productText.includes(keyword)) {
      keywordMatches++;
      score += 18; // Bonus par mot-cl√©
    }
  });
  
  // Bonus combin√© pour plusieurs mots-cl√©s
  if (keywordMatches >= 4) score += 40;
  else if (keywordMatches >= 3) score += 25;
  else if (keywordMatches >= 2) score += 15;
  
  // Longueur de description (qualit√© du contenu)
  if (product.description && product.description.length > 300) score += 25;
  else if (product.description && product.description.length > 200) score += 15;
  else if (product.description && product.description.length > 100) score += 10;
  
  return score;
};

// Algorithme de scoring g√©n√©ral am√©lior√©
const calculateGeneralProductScore = (product: Product): number => {
  let score = 0;
  
  score += 15; // Base score augment√©
  
  // Promotion
  if (product.promoPrice && product.promoPrice < product.price) {
    const discountPercent = ((product.price - product.promoPrice) / product.price) * 100;
    score += discountPercent * 2.5;
  }
  
  // Stock
  if (product.stock > 100) score += 35;
  else if (product.stock > 50) score += 25;
  else if (product.stock > 20) score += 18;
  else if (product.stock > 0) score += 8;
  
  // Qualit√©
  if (product.images && product.images.length > 3) score += 20;
  else if (product.images && product.images.length > 1) score += 12;
  if (product.videoUrl) score += 15;
  
  // YaBaBoss bonus
  if (product.isYaBaBoss) score += 25;
  
  // Prix raisonnable
  if (product.price >= 3000 && product.price <= 500000) score += 15;
  
  // Contenu
  if (product.description && product.description.length > 150) score += 10;
  else if (product.description && product.description.length > 100) score += 5;
  
  return score;
};

// Fonction pour m√©langer un tableau (Fisher-Yates shuffle)
const shuffleArray = <T>(array: T[]): T[] => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

// Distribution √©quitable par cat√©gorie pour "Tous" - Version am√©lior√©e
const distributeByCategory = (products: Product[], maxProducts: number = 100): Product[] => {
  const productsByCategory: { [category: string]: Product[] } = {};
  
  products.forEach(product => {
    const category = product.category || 'Autres';
    if (!productsByCategory[category]) {
      productsByCategory[category] = [];
    }
    productsByCategory[category].push(product);
  });

  // Trier chaque cat√©gorie par score
  Object.keys(productsByCategory).forEach(category => {
    productsByCategory[category] = productsByCategory[category]
      .sort((a, b) => calculateGeneralProductScore(b) - calculateGeneralProductScore(a));
  });

  const categories = Object.keys(productsByCategory);
  const maxProductsPerCategory = Math.max(4, Math.floor(maxProducts / categories.length)); // Minimum 4 par cat√©gorie
  const distributedProducts: Product[] = [];

  // Distribution √©quitable am√©lior√©e
  let categoryIndex = 0;
  let productIndex = 0;
  
  while (distributedProducts.length < maxProducts && categoryIndex < categories.length * 25) {
    const currentCategory = categories[categoryIndex % categories.length];
    const categoryProducts = productsByCategory[currentCategory];
    
    if (productIndex < categoryProducts.length && 
        distributedProducts.filter(p => p.category === currentCategory).length < maxProductsPerCategory) {
      const product = categoryProducts[productIndex];
      if (!distributedProducts.find(p => p.id === product.id)) {
        distributedProducts.push(product);
      }
    }
    
    categoryIndex++;
    if (categoryIndex % categories.length === 0) {
      productIndex++;
    }
  }

  // Compl√©ter avec les meilleurs produits restants
  if (distributedProducts.length < maxProducts) {
    const remainingProducts = products
      .filter(p => !distributedProducts.find(dp => dp.id === p.id))
      .sort((a, b) => calculateGeneralProductScore(b) - calculateGeneralProductScore(a));
    
    const needed = maxProducts - distributedProducts.length;
    distributedProducts.push(...remainingProducts.slice(0, needed));
  }

  return shuffleArray(distributedProducts);
};

// Fonction ULTRA-PERMISSIVE pour filtrer par cat√©gorie - CORRIG√âE pour s√©parer Beaut√© et Sant√© & Bien-√™tre
const flexibleCategoryFilter = (products: Product[], category: string): Product[] => {
  if (!category || category === '' || category === 'Tous') {
    return products;
  }
  
  console.log('üîç Flexible Category Filter - Separate Beauty & Health:', {
    targetCategory: category,
    totalProducts: products.length,
    availableCategories: Array.from(new Set(products.map(p => p.category))).filter(Boolean)
  });
  
  const normalizedCategory = normalizeString(category);
  
  // Extraire les mots-cl√©s de la cat√©gorie
  const categoryKeywords = normalizedCategory.split(' ').filter(word => word.length > 2);
  
  console.log('üéØ Category Keywords Extracted:', {
    original: category,
    normalized: normalizedCategory,
    keywords: categoryKeywords
  });
  
  // 1. Correspondance exacte (priorit√© maximale)
  const exactMatches = products.filter(product => {
    const productCategory = normalizeString(product.category || '');
    return productCategory === normalizedCategory;
  });
  
  // 2. Correspondance partielle dans la cat√©gorie et sous-cat√©gorie
  const partialMatches = products.filter(product => {
    const productCategory = normalizeString(product.category || '');
    const productSubcategory = normalizeString(product.subcategory || '');
    
    return productCategory.includes(normalizedCategory) || 
           normalizedCategory.includes(productCategory) ||
           productSubcategory.includes(normalizedCategory) ||
           categoryKeywords.some(keyword => 
             productCategory.includes(keyword) || 
             productSubcategory.includes(keyword)
           );
  });
  
  // 3. Correspondance par mapping de synonymes - CORRIG√â
  const mappingMatches = products.filter(product => {
    const productCategory = normalizeString(product.category || '');
    const productSubcategory = normalizeString(product.subcategory || '');
    
    // Utiliser le mapping de cat√©gories corrig√©
    const mappings = categoryMapping[normalizedCategory] || [];
    const categoryMappings = categoryMapping[productCategory] || [];
    
    // V√©rifier aussi les mots-cl√©s individuels
    const keywordMappings = categoryKeywords.flatMap(keyword => categoryMapping[keyword] || []);
    
    const hasMapping = [...mappings, ...keywordMappings].some(mapping => {
      const normalizedMapping = normalizeString(mapping);
      return productCategory.includes(normalizedMapping) || 
             productSubcategory.includes(normalizedMapping);
    });
    
    const hasCategoryMapping = categoryMappings.some(mapping => {
      const normalizedMapping = normalizeString(mapping);
      return normalizedMapping.includes(normalizedCategory) ||
             categoryKeywords.some(keyword => normalizedMapping.includes(keyword));
    });
    
    return hasMapping || hasCategoryMapping;
  });
  
  // 4. Correspondance dans le nom et description du produit
  const nameMatches = products.filter(product => {
    const productName = normalizeString(product.name || '');
    const productDescription = normalizeString(product.description || '');
    const searchText = `${productName} ${productDescription}`;
    
    // Recherche par mots-cl√©s individuels
    return categoryKeywords.some(keyword => searchText.includes(keyword)) ||
           searchText.includes(normalizedCategory);
  });
  
  // 5. Correspondance sp√©cifique pour BEAUT√â uniquement
  let beautyMatches: Product[] = [];
  if (['beaute', 'beaut√©', 'beauty'].includes(normalizedCategory)) {
    const beautyKeywords = ['beaute', 'beaut√©', 'cosmetique', 'cosm√©tique', 'maquillage', 'makeup', 'rouge', 'lipstick', 'mascara', 'foundation', 'vernis', 'nail', 'parfum'];
    beautyMatches = products.filter(product => {
      const searchText = normalizeString(`${product.name} ${product.description} ${product.category}`);
      return beautyKeywords.some(keyword => searchText.includes(keyword));
    });
  }
  
  // 6. Correspondance sp√©cifique pour SANT√â & BIEN-√äTRE uniquement
  let healthWellnessMatches: Product[] = [];
  if (['sante', 'sant√©', 'bien etre', 'bien √™tre', 'bien-√™tre', 'wellness', 'health'].includes(normalizedCategory)) {
    const healthKeywords = ['sante', 'sant√©', 'health', 'medical', 'm√©dical', 'vitamines', 'supplements', 'bien etre', 'bien-√™tre', 'wellness', 'fitness', 'sport', 'yoga', 'massage', 'relaxation'];
    healthWellnessMatches = products.filter(product => {
      const searchText = normalizeString(`${product.name} ${product.description} ${product.category}`);
      return healthKeywords.some(keyword => searchText.includes(keyword));
    });
  }
  
  // Combiner tous les r√©sultats en √©vitant les doublons
  const allMatches = new Map<string, Product>();
  
  // Ajouter dans l'ordre de priorit√©
  exactMatches.forEach(p => allMatches.set(p.id, p));
  partialMatches.forEach(p => allMatches.set(p.id, p));
  mappingMatches.forEach(p => allMatches.set(p.id, p));
  nameMatches.forEach(p => allMatches.set(p.id, p));
  beautyMatches.forEach(p => allMatches.set(p.id, p));
  healthWellnessMatches.forEach(p => allMatches.set(p.id, p));
  
  const finalResults = Array.from(allMatches.values());
  
  console.log('‚úÖ Separate Category Filter Results:', {
    category,
    exactMatches: exactMatches.length,
    partialMatches: partialMatches.length,
    mappingMatches: mappingMatches.length,
    nameMatches: nameMatches.length,
    beautyMatches: beautyMatches.length,
    healthWellnessMatches: healthWellnessMatches.length,
    totalUnique: finalResults.length,
    sampleResults: finalResults.slice(0, 3).map(p => ({
      name: p.name.substring(0, 30),
      category: p.category,
      description: p.description?.substring(0, 50)
    }))
  });
  
  return finalResults;
};

export const useAdvancedProductDistribution = (
  allProducts: Product[], 
  activeCategory: string = ''
): AdvancedDistributedProducts => {
  return useMemo(() => {
    console.log('üöÄ Advanced Distribution - Separate Beauty & Health Categories:', {
      totalProducts: allProducts.length,
      activeCategory,
      categoriesBreakdown: allProducts.reduce((acc, product) => {
        const category = product.category || 'Non cat√©goris√©';
        acc[category] = (acc[category] || 0) + 1;
        return acc;
      }, {} as { [key: string]: number })
    });

    let workingProducts = [...allProducts];
    
    // Filtrage CORRIG√â par cat√©gorie si s√©lectionn√©e
    if (activeCategory && activeCategory !== '' && activeCategory !== 'Tous') {
      workingProducts = flexibleCategoryFilter(allProducts, activeCategory);
      console.log(`üìÇ Separate Category Filter Result for "${activeCategory}":`, {
        originalCount: allProducts.length,
        filteredCount: workingProducts.length,
        improvementRatio: (workingProducts.length / allProducts.length * 100).toFixed(1) + '%',
        sampleProducts: workingProducts.slice(0, 5).map(p => ({
          name: p.name.substring(0, 25),
          category: p.category,
          imageCount: p.images.length
        }))
      });
    }

    const distributed: AdvancedDistributedProducts = {
      yaBaBossProducts: [],
      generalProducts: [],
      totalDisplayed: 0
    };

    const usedProductIds = new Set<string>();

    // Distribution YaBaBoss par cat√©gorie
    const yaBaBossProducts = workingProducts
      .filter(product => product.isYaBaBoss)
      .map(product => ({
        product,
        score: calculateAdvancedYaBaBossScore(product)
      }))
      .filter(({ score }) => score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, activeCategory && activeCategory !== 'Tous' ? 25 : 30)
      .map(({ product }) => product);
    
    distributed.yaBaBossProducts = yaBaBossProducts;
    yaBaBossProducts.forEach(product => usedProductIds.add(product.id));

    // Distribution g√©n√©rale par cat√©gorie
    const remainingProducts = workingProducts.filter(product => 
      !usedProductIds.has(product.id)
    );

    if (activeCategory && activeCategory !== '' && activeCategory !== 'Tous') {
      // Pour une cat√©gorie sp√©cifique
      const categoryProducts = remainingProducts
        .map(product => ({
          product,
          score: calculateGeneralProductScore(product)
        }))
        .sort((a, b) => b.score - a.score)
        .slice(0, 200)
        .map(({ product }) => product);
      
      distributed.generalProducts = shuffleArray(categoryProducts);
    } else {
      // Pour "Tous" : distribution √©quitable par cat√©gorie
      distributed.generalProducts = distributeByCategory(remainingProducts, 120);
    }

    distributed.totalDisplayed = distributed.yaBaBossProducts.length + distributed.generalProducts.length;

    // Audit final
    console.log('‚úÖ Distribution Complete - Separate Beauty & Health:', {
      category: activeCategory || 'Tous',
      results: {
        yaBaBoss: distributed.yaBaBossProducts.length,
        general: distributed.generalProducts.length,
        total: distributed.totalDisplayed
      },
      categoryDistribution: distributed.generalProducts.reduce((acc, product) => {
        const category = product.category || 'Non cat√©goris√©';
        acc[category] = (acc[category] || 0) + 1;
        return acc;
      }, {} as { [key: string]: number })
    });

    return distributed;
  }, [allProducts, activeCategory]);
};
